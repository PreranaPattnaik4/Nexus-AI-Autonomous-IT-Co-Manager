{
  "entities": {
    "UserAccount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserAccount",
      "type": "object",
      "description": "Stores user account information, excluding authentication credentials.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user account. (PK)"
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "User's display name."
        },
        "creationTimestamp": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "email",
        "displayName",
        "creationTimestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserAccount",
          "schema": {
            "$ref": "#/backend/entities/UserAccount"
          },
          "description": "Stores user account information. The userId parameter corresponds to the Firebase Auth UID. Includes denormalized user data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, corresponding to their Firebase Auth UID."
            }
          ]
        }
      },
      {
        "path": "/tasks/{taskId}",
        "definition": {
          "entityName": "Task",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Stores task information for the agent.  Authorization is based on the user's role, which should be managed by the backend and included in the task document. Includes denormalized user data.",
          "params": [
            {
              "name": "taskId",
              "description": "The unique identifier for the task."
            }
          ]
        }
      },
      {
        "path": "/systems/{systemId}",
        "definition": {
          "entityName": "System",
          "schema": {
            "$ref": "#/backend/entities/System"
          },
          "description": "Stores system information.  Authorization is based on the user's role, which should be managed by the backend and included in the system document. Includes denormalized user data.",
          "params": [
            {
              "name": "systemId",
              "description": "The unique identifier for the system."
            }
          ]
        }
      },
      {
        "path": "/alerts/{alertId}",
        "definition": {
          "entityName": "Alert",
          "schema": {
            "$ref": "#/backend/entities/Alert"
          },
          "description": "Stores alert information. Authorization is based on the user's role, which should be managed by the backend and included in the alert document. Includes denormalized user data.",
          "params": [
            {
              "name": "alertId",
              "description": "The unique identifier for the alert."
            }
          ]
        }
      },
      {
        "path": "/reports/{reportId}",
        "definition": {
          "entityName": "Report",
          "schema": {
            "$ref": "#/backend/entities/Report"
          },
          "description": "Stores report information. Authorization is based on the user's role, which should be managed by the backend and included in the report document. Includes denormalized user data.",
          "params": [
            {
              "name": "reportId",
              "description": "The unique identifier for the report."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure prioritizes authorization independence and QAPs. User data is stored under `/users/{userId}`, ensuring private data remains secure. Tasks, systems, alerts, and reports are top-level collections to allow for efficient querying and management. Authorization independence is achieved because security rules can be applied to each of the collections without needing to read parent documents."
  }
}