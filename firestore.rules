/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes authorization independence and query performance.
 * It employs a combination of owner-only access for user data and role-based access for tasks, systems, alerts, and reports.
 *
 * Data Structure:
 * - User data is stored under /users/{userId}, ensuring private data remains secure.
 * - Tasks, systems, alerts, and reports are top-level collections to allow for efficient querying and management.
 *
 * Key Security Decisions:
 * - Users can only access their own user data.
 * - Listing all users is disallowed.
 * - Tasks, systems, alerts, and reports require role-based authorization (implementation TBD, but owner-only for now) and all documents must have an `ownerId` field.
 *
 * Denormalization for Authorization:
 * - Documents in the `/tasks`, `/systems`, `/alerts`, and `/reports` collections must have an `ownerId` field to enable owner-only write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces owner-only access to user account data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own account document at /users/user_abc if the document id matches their UID.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, and delete their own account document at /users/user_abc.
     * @deny (create) - User with UID 'user_abc' cannot create an account document for another user at /users/user_xyz.
     * @deny (get, update, delete) - User with UID 'user_abc' cannot read, update, or delete another user's account document at /users/user_xyz.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // No listing of all users
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to task documents.  Currently enforces owner-only access.
     * @path /tasks/{taskId}
     * @allow (get, list) - Any signed-in user can read any task.
     * @allow (create) - User with UID 'user_abc' can create a task if request.resource.data.ownerId == request.auth.uid.
     * @allow (update, delete) - User with UID 'user_abc' can update/delete a task if they are the owner (resource.data.ownerId == request.auth.uid).
     * @deny (create) - User with UID 'user_abc' cannot create a task with an ownerId that does not match their own UID.
     * @deny (update, delete) - User with UID 'user_abc' cannot update/delete a task they don't own.
     * @principle Enforces owner-only writes.
     */
    match /tasks/{taskId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Controls access to system documents. Currently enforces owner-only access.
     * @path /systems/{systemId}
     * @allow (get, list) - Any signed-in user can read any system.
     * @allow (create) - User with UID 'user_abc' can create a system if request.resource.data.ownerId == request.auth.uid.
     * @allow (update, delete) - User with UID 'user_abc' can update/delete a system if they are the owner (resource.data.ownerId == request.auth.uid).
     * @deny (create) - User with UID 'user_abc' cannot create a system with an ownerId that does not match their own UID.
     * @deny (update, delete) - User with UID 'user_abc' cannot update/delete a system they don't own.
     * @principle Enforces owner-only writes.
     */
    match /systems/{systemId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Controls access to alert documents. Currently enforces owner-only access.
     * @path /alerts/{alertId}
     * @allow (get, list) - Any signed-in user can read any alert.
     * @allow (create) - User with UID 'user_abc' can create an alert if request.resource.data.ownerId == request.auth.uid.
     * @allow (update, delete) - User with UID 'user_abc' can update/delete an alert if they are the owner (resource.data.ownerId == request.auth.uid).
     * @deny (create) - User with UID 'user_abc' cannot create an alert with an ownerId that does not match their own UID.
     * @deny (update, delete) - User with UID 'user_abc' cannot update/delete an alert they don't own.
     * @principle Enforces owner-only writes.
     */
    match /alerts/{alertId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Controls access to report documents.  Currently enforces owner-only access.
     * @path /reports/{reportId}
     * @allow (get, list) - Any signed-in user can read any report.
     * @allow (create) - User with UID 'user_abc' can create a report if request.resource.data.ownerId == request.auth.uid.
     * @allow (update, delete) - User with UID 'user_abc' can update/delete a report if they are the owner (resource.data.ownerId == request.auth.uid).
     * @deny (create) - User with UID 'user_abc' cannot create a report with an ownerId that does not match their own UID.
     * @deny (update, delete) - User with UID 'user_abc' cannot update/delete a report they don't own.
     * @principle Enforces owner-only writes.
     */
    match /reports/{reportId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }
  }
}