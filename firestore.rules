/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by default, restricting access unless explicitly allowed.
 * It assumes a role-based access control model, where each document contains authorization
 * data (e.g., `ownerId`, `memberIds`, or a `members` map).  Data shape validation is relaxed
 * to enable rapid prototyping.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores individual user account information.  Access is restricted to the
 *   owning user.
 * - `/tasks/{taskId}`: Stores task information. Assumes each task document contains fields to
 *   control access (e.g., `ownerId`, `memberIds`, or a `members` map).
 * - `/systems/{systemId}`: Stores system information.  Assumes each system document contains fields
 *   to control access.
 * - `/alerts/{alertId}`: Stores alert information. Assumes each alert document contains fields to
 *   control access.
 * - `/reports/{reportId}`: Stores report information. Assumes each report document contains fields
 *   to control access.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent data exposure.
 * - Write operations are ALWAYS protected by authorization checks; there are no `allow write: if true;` rules.
 * - Authorization data (e.g., `ownerId`, `memberIds`) is assumed to be denormalized onto each document.
 *   This avoids costly `get()` calls in security rules.
 *
 * Access Control Pattern: Role-Based Access Control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user account documents.
     * @path /users/{userId}
     * @allow (create) - If the user's UID matches the userId in the path.
     * @allow (get, list, update, delete) - If the user's UID matches the userId in the path.
     * @deny (create) - If the user's UID does not match the userId in the path.
     * @deny (get, list, update, delete) - If the user's UID does not match the userId in the path.
     * @principle Enforces user-ownership: only the authenticated user can read/write their own data.
     */
    match /users/{userId} {
      // Check if the user is signed in.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isSelfCreate(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to task documents.
     * @path /tasks/{taskId}
     * @allow (get, list) - Public read access to all tasks.
     * @allow (create, update, delete) - Only the owner of the task can modify it.  Assumes an `ownerId` field exists.
     * @deny (create, update, delete) - If the user is not the owner of the task.
     * @principle Allows public task listing but restricts modifications to the owner.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to system documents.
     * @path /systems/{systemId}
     * @allow (get, list) - Public read access to all systems.
     * @allow (create, update, delete) - Only the owner of the system can modify it.  Assumes an `ownerId` field exists.
     * @deny (create, update, delete) - If the user is not the owner of the system.
     */
    match /systems/{systemId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to alert documents.
     * @path /alerts/{alertId}
     * @allow (get, list) - Public read access to all alerts.
     * @allow (create, update, delete) - Only the owner of the alert can modify it. Assumes an `ownerId` field exists.
     * @deny (create, update, delete) - If the user is not the owner of the alert.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to report documents.
     * @path /reports/{reportId}
     * @allow (get, list) - Public read access to all reports.
     * @allow (create, update, delete) - Only the owner of the report can modify it.  Assumes an `ownerId` field exists.
     * @deny (create, update, delete) - If the user is not the owner of the report.
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is creating their own user document.
     * @param {string} userId - The user ID to check against.
     * @return {bool} True if the user is creating their own document, false otherwise.
     */
    function isSelfCreate(userId) {
      return request.auth.uid == userId && request.resource.data.id == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing resource.
     * @param {string} userId - The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}